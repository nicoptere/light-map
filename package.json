{
  "name": "light-map",
  "version": "0.0.4",
  "description": "a light-weight TMS viewer",
  "main": "bin/light-map.js",
  "scripts": {
    "test": "new Map( provider, domains, 512,512, 0,10 )"

  },
  "keywords": [
    "map",
    "maps",
    "tms",
    "WGS84",
    "canvas",
    "self-contained",
    "mercator"
  ],
  "author": "Nicolas Barradeau",
  "maintainers": [
    {
      "name": "Nicolas Barradeau",
      "email": "nicoptere@gmail.com",
      "web": "http://www.barradeau.com/blog"
    }
  ],

  "dependencies" :{
    "events":"1.0.2"
  },
  "devDependencies": {
    "browserify": "^11.0.0",
    "uglifyjs": "^2.4.10"
  },

  "scripts": {
    "bundle": "browserify map/Map.js --standalone Map -o bin/light-map.js",
    "uglify": "uglifyjs bin/light-map.js -m -c -screw-ie8 > example/light-map.min.js",
    "build": "npm run bundle && npm run uglify"
  },

  "demos": [
    "./example/index.html"
  ],

  "readme": "light map\n=============\n\nminimal, lightweight, self contained TMS viewer with a 2d canvas renderer.\n\n### live example ###\n- [an example with the most common methods](http://nicoptere.github.io/light-map/example/) let's you set the lat/lon/zoom, change the width/height of the canvas and monitor the load progress.\n- as the map output is a Canvas2D, [this is an example with a fixed setup](http://nicoptere.github.io/light-map/example/basic.html) that shows how to post process the output (adding a vignette).\n\n### more info ###\n[explanation and examples](http://nicoptere.github.io/light-map/)\n\n### basic example ###\n\n```js\n<script src=\"light-map.min.js\"></script>\n\n<script>\n    var provider = \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    var domains = \"a,b,c\".split( ',' );\n    var map = new Map( provider, domains, 512,512,0,18 );\n    document.body.appendChild( map.canvas );\n    map.setView(0,0,1);\n</script>\n```\n\n### vignette example ###\n\n```js\n<script src=\"light-map.min.js\"></script>\n\n<script>\n\n    // provider: URL of the tile map service\n    // domains: URL of the domains used by the tile map service\n    // you can choose from a list of *free* TMS providers:\n    // http://leaflet-extras.github.io/leaflet-providers/preview/\n    // example:\n    //\n    //        provider = \"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    //        domains = [ \"a\", \"b\", \"c\" ];\n    //\n    //alternately you can use .mbtiles\n\n    var provider, domains;\n    provider = \"http://ttiles{s}.mqcdn.com/tiles/1.0.0/vy/sat/{z}/{x}/{y}.png\";\n    domains = [ \"01\" , \"02\", \"03\", \"04\" ];\n\n    // you may need to use a proxy to load images on local servers\n    // check out this gist : https://gist.github.com/nicoptere/a23ffae9ed51a5ca9766\n    var proxy = \"\";//\"./proxy.php?url=\";\n\n    var map = new Map( proxy + provider, domains, 512,512, 0, 10 );\n    document.body.appendChild( map.canvas );\n\n    //listening to the loading events\n    function onLoadComplete( status ){\n\n        if(status==0 )console.log( \"onLoadComplete\", \"->\", status );\n    }\n    //a new tile was loaded here\n    function onTileLoaded( tile ){\n\n        console.log( \"onTileLoaded\", \"->\", tile );\n    }\n    //the canvas' context is returned here\n    function onTextureUpdate( ctx ){\n\n        console.log( \"onTextureUpdate\" );\n    }\n\n    map.eventEmitter.on( Map.ON_LOAD_COMPLETE, onLoadComplete );\n    map.eventEmitter.on( Map.ON_TILE_LOADED, onTileLoaded );\n    map.eventEmitter.on( Map.ON_TEXTURE_UPDATE, onTextureUpdate );\n\n    //this would be where I live :)\n    var lat = o_lat = 48.854777;\n    var lon = o_lon = 2.317499;\n    var zoom = 16;\n    map.setView( lat, lon, zoom );\n\n    //it can be done in a loop\n    function update(){\n\n        var t = ( Math.sin( Date.now() * 0.001 ) );\n        lat = o_lat;\n        lon = o_lon + t * .0025;\n        map.setView( lat, lon, zoom );\n    }\n    setInterval( update, 1000 / 60 );\n\n    // as the result is a canvas, it's possible\n    // to add post processing to map.ctx\n    function vignette( ctx )\n    {\n        //create a gradient\n        var w2 = map.width / 2;\n        var grd = ctx.createRadialGradient( w2, w2, 0.000, w2, w2, w2);\n\n        // Add colors\n        grd.addColorStop(0.000, 'rgba(0, 0, 0, 0.00 )');\n        grd.addColorStop(1.000, 'rgba(0, 0, 0, 0.75 )');\n\n        // Fill with gradient\n        ctx.fillStyle = grd;\n        ctx.fillRect(0, 0, map.width, map.height );\n    }\n    map.eventEmitter.on( Map.ON_TEXTURE_UPDATE, vignette );\n\n\n</script>\n\n```\n\n### npm module installation ###\n```\nnpm install light-map --save\n```\n\n### related ###\n[Python library to perform Mercator conversions](http://www.maptiler.org/google-maps-coordinates-tile-bounds-projection/)\n\n[Quad keys explained](https://msdn.microsoft.com/en-us/library/bb259689.aspx)\n\nnpm [globalMercator](https://github.com/davvo/globalmercator/blob/master/globalmercator.js)\n\n### License ###\n\nThis content is released under the [MIT License](http://opensource.org/licenses/MIT).",

  "repository": {
    "type": "git",
    "url": "https://github.com/nicoptere/light-map.git"
  },
  "license": "MIT",

  "bugs": {
    "url": "https://github.com/nicoptere/light-map/issues"
  },

  "homepage": "https://github.com/nicoptere/light-map"
}
